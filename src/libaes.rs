/****************************************************
 *
 * https://cryptopals.com/sets/1/challenges/7
 *
 * 128,192,256 bit AES ECB/CBC encryption library
 * written as a personal learning exercise using
 * the algorithm described at:
 * https://en.wikipedia.org/wiki/Rijndael_key_schedule
 *****************************************************/

use crate::Cipher;

#[derive(PartialEq)]
enum CryptMode {
    Encrypt,
    Decrypt,
}

// Encryption
//
// 176 bits = 10 cycles, 11 calls of add_round_key()
// 208 bits = 12 cycles, 13 calls of add_round_key()
// 240 bits = 14 cycles, 15 calls of add_round_key()
//
// Round  Operation for bits == 128
// -      add_round_key(state)
// 0      add_round_key(mix_columns(shift_rows(sub_bytes(state))))
// 1      add_round_key(mix_columns(shift_rows(sub_bytes(state))))
// 2      add_round_key(mix_columns(shift_rows(sub_bytes(state))))
// 3      add_round_key(mix_columns(shift_rows(sub_bytes(state))))
// 4      add_round_key(mix_columns(shift_rows(sub_bytes(state))))
// 5      add_round_key(mix_columns(shift_rows(sub_bytes(state))))
// 6      add_round_key(mix_columns(shift_rows(sub_bytes(state))))
// 7      add_round_key(mix_columns(shift_rows(sub_bytes(state))))
// 8      add_round_key(mix_columns(shift_rows(sub_bytes(state))))
// 9      add_round_key(shift_rows(sub_bytes(state)))
//
// =================================================================
//
// Decryption
//
// Reverse order of encrypt in addition to the inverse of each function
//
// Round  Operation for bits == 128
// -      add_round_key(state)
// 0      mix_columns(add_round_key(sub_bytes(shift_rows(state))))
// 1      mix_columns(add_round_key(sub_bytes(shift_rows(state))))
// 2      mix_columns(add_round_key(sub_bytes(shift_rows(state))))
// 3      mix_columns(add_round_key(sub_bytes(shift_rows(state))))
// 4      mix_columns(add_round_key(sub_bytes(shift_rows(state))))
// 5      mix_columns(add_round_key(sub_bytes(shift_rows(state))))
// 6      mix_columns(add_round_key(sub_bytes(shift_rows(state))))
// 7      mix_columns(add_round_key(sub_bytes(shift_rows(state))))
// 8      mix_columns(add_round_key(sub_bytes(shift_rows(state))))
// 9      add_round_key(sub_bytes(shift_rows(state)))
//

pub fn aes_encrypt(bits: usize, passkey: &[u8; 32], data: &[u8], cipher: &Cipher, iv: &[u8; 16]) -> Vec<u8> {
    match cipher {
        Cipher::CTR => aes_ctr(bits, passkey, data, iv),
        Cipher::ECB | Cipher::CBC => aes_cipher_encrypt(bits, passkey, data, cipher, iv),
    }
}

pub fn aes_decrypt(bits: usize, passkey: &[u8; 32], data: &[u8], cipher: &Cipher, iv: &[u8; 16]) -> Vec<u8> {
    match cipher {
        Cipher::CTR => aes_ctr(bits, passkey, data, iv),
        Cipher::ECB | Cipher::CBC => aes_cipher_decrypt(bits, passkey, data, cipher, iv),
    }
}

#[rustfmt::skip]
const RCON_TABLE: [u8; 256] = [
    0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
    0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
    0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
    0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
    0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
    0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
    0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
    0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
    0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
    0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
    0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
    0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
    0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
    0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
    0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
    0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d
];

const fn rcon(c: usize) -> u8 {
    RCON_TABLE[c]
}

#[rustfmt::skip]
const SBOX_TABLE: [[u8; 16]; 16] = [
    [ 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, ],
    [ 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, ],
    [ 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, ],
    [ 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, ],
    [ 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, ],
    [ 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, ],
    [ 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, ],
    [ 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, ],
    [ 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, ],
    [ 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, ],
    [ 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, ],
    [ 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, ],
    [ 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, ],
    [ 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, ],
    [ 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, ],
    [ 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16, ],
];

const fn sbox(c: u8) -> u8 {
    SBOX_TABLE[c as usize >> 4][c as usize & 0x0f]
}

#[rustfmt::skip]
const INV_SBOX_TABLE: [[u8; 16]; 16] = [
    [ 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, ],
    [ 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, ],
    [ 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, ],
    [ 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, ],
    [ 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, ],
    [ 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, ],
    [ 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, ],
    [ 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, ],
    [ 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, ],
    [ 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, ],
    [ 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, ],
    [ 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, ],
    [ 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, ],
    [ 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, ],
    [ 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, ],
    [ 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d, ],
];

const fn inv_sbox(c: u8) -> u8 {
    INV_SBOX_TABLE[c as usize >> 4][c as usize & 0x0f]
}

// Galois Multiplication lookup tables
// https://en.wikipedia.org/wiki/Rijndael_MixColumns
#[rustfmt::skip]
const G2_TABLE: [u8; 256] = [
    0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e,
    0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e,
    0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e,
    0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e,
    0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e,
    0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe,
    0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde,
    0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe,
    0x1b, 0x19, 0x1f, 0x1d, 0x13, 0x11, 0x17, 0x15, 0x0b, 0x09, 0x0f, 0x0d, 0x03, 0x01, 0x07, 0x05,
    0x3b, 0x39, 0x3f, 0x3d, 0x33, 0x31, 0x37, 0x35, 0x2b, 0x29, 0x2f, 0x2d, 0x23, 0x21, 0x27, 0x25,
    0x5b, 0x59, 0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55, 0x4b, 0x49, 0x4f, 0x4d, 0x43, 0x41, 0x47, 0x45,
    0x7b, 0x79, 0x7f, 0x7d, 0x73, 0x71, 0x77, 0x75, 0x6b, 0x69, 0x6f, 0x6d, 0x63, 0x61, 0x67, 0x65,
    0x9b, 0x99, 0x9f, 0x9d, 0x93, 0x91, 0x97, 0x95, 0x8b, 0x89, 0x8f, 0x8d, 0x83, 0x81, 0x87, 0x85,
    0xbb, 0xb9, 0xbf, 0xbd, 0xb3, 0xb1, 0xb7, 0xb5, 0xab, 0xa9, 0xaf, 0xad, 0xa3, 0xa1, 0xa7, 0xa5,
    0xdb, 0xd9, 0xdf, 0xdd, 0xd3, 0xd1, 0xd7, 0xd5, 0xcb, 0xc9, 0xcf, 0xcd, 0xc3, 0xc1, 0xc7, 0xc5,
    0xfb, 0xf9, 0xff, 0xfd, 0xf3, 0xf1, 0xf7, 0xf5, 0xeb, 0xe9, 0xef, 0xed, 0xe3, 0xe1, 0xe7, 0xe5
];
// Multiply by 2
const fn g2(c: u8) -> u8 {
    G2_TABLE[c as usize]
}

#[rustfmt::skip]
const G3_TABLE: [u8; 256] = [
    0x00, 0x03, 0x06, 0x05, 0x0c, 0x0f, 0x0a, 0x09, 0x18, 0x1b, 0x1e, 0x1d, 0x14, 0x17, 0x12, 0x11,
    0x30, 0x33, 0x36, 0x35, 0x3c, 0x3f, 0x3a, 0x39, 0x28, 0x2b, 0x2e, 0x2d, 0x24, 0x27, 0x22, 0x21,
    0x60, 0x63, 0x66, 0x65, 0x6c, 0x6f, 0x6a, 0x69, 0x78, 0x7b, 0x7e, 0x7d, 0x74, 0x77, 0x72, 0x71,
    0x50, 0x53, 0x56, 0x55, 0x5c, 0x5f, 0x5a, 0x59, 0x48, 0x4b, 0x4e, 0x4d, 0x44, 0x47, 0x42, 0x41,
    0xc0, 0xc3, 0xc6, 0xc5, 0xcc, 0xcf, 0xca, 0xc9, 0xd8, 0xdb, 0xde, 0xdd, 0xd4, 0xd7, 0xd2, 0xd1,
    0xf0, 0xf3, 0xf6, 0xf5, 0xfc, 0xff, 0xfa, 0xf9, 0xe8, 0xeb, 0xee, 0xed, 0xe4, 0xe7, 0xe2, 0xe1,
    0xa0, 0xa3, 0xa6, 0xa5, 0xac, 0xaf, 0xaa, 0xa9, 0xb8, 0xbb, 0xbe, 0xbd, 0xb4, 0xb7, 0xb2, 0xb1,
    0x90, 0x93, 0x96, 0x95, 0x9c, 0x9f, 0x9a, 0x99, 0x88, 0x8b, 0x8e, 0x8d, 0x84, 0x87, 0x82, 0x81,
    0x9b, 0x98, 0x9d, 0x9e, 0x97, 0x94, 0x91, 0x92, 0x83, 0x80, 0x85, 0x86, 0x8f, 0x8c, 0x89, 0x8a,
    0xab, 0xa8, 0xad, 0xae, 0xa7, 0xa4, 0xa1, 0xa2, 0xb3, 0xb0, 0xb5, 0xb6, 0xbf, 0xbc, 0xb9, 0xba,
    0xfb, 0xf8, 0xfd, 0xfe, 0xf7, 0xf4, 0xf1, 0xf2, 0xe3, 0xe0, 0xe5, 0xe6, 0xef, 0xec, 0xe9, 0xea,
    0xcb, 0xc8, 0xcd, 0xce, 0xc7, 0xc4, 0xc1, 0xc2, 0xd3, 0xd0, 0xd5, 0xd6, 0xdf, 0xdc, 0xd9, 0xda,
    0x5b, 0x58, 0x5d, 0x5e, 0x57, 0x54, 0x51, 0x52, 0x43, 0x40, 0x45, 0x46, 0x4f, 0x4c, 0x49, 0x4a,
    0x6b, 0x68, 0x6d, 0x6e, 0x67, 0x64, 0x61, 0x62, 0x73, 0x70, 0x75, 0x76, 0x7f, 0x7c, 0x79, 0x7a,
    0x3b, 0x38, 0x3d, 0x3e, 0x37, 0x34, 0x31, 0x32, 0x23, 0x20, 0x25, 0x26, 0x2f, 0x2c, 0x29, 0x2a,
    0x0b, 0x08, 0x0d, 0x0e, 0x07, 0x04, 0x01, 0x02, 0x13, 0x10, 0x15, 0x16, 0x1f, 0x1c, 0x19, 0x1a
];
// Multiply by 3
const fn g3(c: u8) -> u8 {
    G3_TABLE[c as usize]
}

#[rustfmt::skip]
const G9_TABLE: [u8; 256] = [
    0x00, 0x09, 0x12, 0x1b, 0x24, 0x2d, 0x36, 0x3f, 0x48, 0x41, 0x5a, 0x53, 0x6c, 0x65, 0x7e, 0x77,
    0x90, 0x99, 0x82, 0x8b, 0xb4, 0xbd, 0xa6, 0xaf, 0xd8, 0xd1, 0xca, 0xc3, 0xfc, 0xf5, 0xee, 0xe7,
    0x3b, 0x32, 0x29, 0x20, 0x1f, 0x16, 0x0d, 0x04, 0x73, 0x7a, 0x61, 0x68, 0x57, 0x5e, 0x45, 0x4c,
    0xab, 0xa2, 0xb9, 0xb0, 0x8f, 0x86, 0x9d, 0x94, 0xe3, 0xea, 0xf1, 0xf8, 0xc7, 0xce, 0xd5, 0xdc,
    0x76, 0x7f, 0x64, 0x6d, 0x52, 0x5b, 0x40, 0x49, 0x3e, 0x37, 0x2c, 0x25, 0x1a, 0x13, 0x08, 0x01,
    0xe6, 0xef, 0xf4, 0xfd, 0xc2, 0xcb, 0xd0, 0xd9, 0xae, 0xa7, 0xbc, 0xb5, 0x8a, 0x83, 0x98, 0x91,
    0x4d, 0x44, 0x5f, 0x56, 0x69, 0x60, 0x7b, 0x72, 0x05, 0x0c, 0x17, 0x1e, 0x21, 0x28, 0x33, 0x3a,
    0xdd, 0xd4, 0xcf, 0xc6, 0xf9, 0xf0, 0xeb, 0xe2, 0x95, 0x9c, 0x87, 0x8e, 0xb1, 0xb8, 0xa3, 0xaa,
    0xec, 0xe5, 0xfe, 0xf7, 0xc8, 0xc1, 0xda, 0xd3, 0xa4, 0xad, 0xb6, 0xbf, 0x80, 0x89, 0x92, 0x9b,
    0x7c, 0x75, 0x6e, 0x67, 0x58, 0x51, 0x4a, 0x43, 0x34, 0x3d, 0x26, 0x2f, 0x10, 0x19, 0x02, 0x0b,
    0xd7, 0xde, 0xc5, 0xcc, 0xf3, 0xfa, 0xe1, 0xe8, 0x9f, 0x96, 0x8d, 0x84, 0xbb, 0xb2, 0xa9, 0xa0,
    0x47, 0x4e, 0x55, 0x5c, 0x63, 0x6a, 0x71, 0x78, 0x0f, 0x06, 0x1d, 0x14, 0x2b, 0x22, 0x39, 0x30,
    0x9a, 0x93, 0x88, 0x81, 0xbe, 0xb7, 0xac, 0xa5, 0xd2, 0xdb, 0xc0, 0xc9, 0xf6, 0xff, 0xe4, 0xed,
    0x0a, 0x03, 0x18, 0x11, 0x2e, 0x27, 0x3c, 0x35, 0x42, 0x4b, 0x50, 0x59, 0x66, 0x6f, 0x74, 0x7d,
    0xa1, 0xa8, 0xb3, 0xba, 0x85, 0x8c, 0x97, 0x9e, 0xe9, 0xe0, 0xfb, 0xf2, 0xcd, 0xc4, 0xdf, 0xd6,
    0x31, 0x38, 0x23, 0x2a, 0x15, 0x1c, 0x07, 0x0e, 0x79, 0x70, 0x6b, 0x62, 0x5d, 0x54, 0x4f, 0x46
];
// Multiply by 9
const fn g9(c: u8) -> u8 {
    G9_TABLE[c as usize]
}

#[rustfmt::skip]
const G11_TABLE: [u8; 256] = [
    0x00, 0x0b, 0x16, 0x1d, 0x2c, 0x27, 0x3a, 0x31, 0x58, 0x53, 0x4e, 0x45, 0x74, 0x7f, 0x62, 0x69,
    0xb0, 0xbb, 0xa6, 0xad, 0x9c, 0x97, 0x8a, 0x81, 0xe8, 0xe3, 0xfe, 0xf5, 0xc4, 0xcf, 0xd2, 0xd9,
    0x7b, 0x70, 0x6d, 0x66, 0x57, 0x5c, 0x41, 0x4a, 0x23, 0x28, 0x35, 0x3e, 0x0f, 0x04, 0x19, 0x12,
    0xcb, 0xc0, 0xdd, 0xd6, 0xe7, 0xec, 0xf1, 0xfa, 0x93, 0x98, 0x85, 0x8e, 0xbf, 0xb4, 0xa9, 0xa2,
    0xf6, 0xfd, 0xe0, 0xeb, 0xda, 0xd1, 0xcc, 0xc7, 0xae, 0xa5, 0xb8, 0xb3, 0x82, 0x89, 0x94, 0x9f,
    0x46, 0x4d, 0x50, 0x5b, 0x6a, 0x61, 0x7c, 0x77, 0x1e, 0x15, 0x08, 0x03, 0x32, 0x39, 0x24, 0x2f,
    0x8d, 0x86, 0x9b, 0x90, 0xa1, 0xaa, 0xb7, 0xbc, 0xd5, 0xde, 0xc3, 0xc8, 0xf9, 0xf2, 0xef, 0xe4,
    0x3d, 0x36, 0x2b, 0x20, 0x11, 0x1a, 0x07, 0x0c, 0x65, 0x6e, 0x73, 0x78, 0x49, 0x42, 0x5f, 0x54,
    0xf7, 0xfc, 0xe1, 0xea, 0xdb, 0xd0, 0xcd, 0xc6, 0xaf, 0xa4, 0xb9, 0xb2, 0x83, 0x88, 0x95, 0x9e,
    0x47, 0x4c, 0x51, 0x5a, 0x6b, 0x60, 0x7d, 0x76, 0x1f, 0x14, 0x09, 0x02, 0x33, 0x38, 0x25, 0x2e,
    0x8c, 0x87, 0x9a, 0x91, 0xa0, 0xab, 0xb6, 0xbd, 0xd4, 0xdf, 0xc2, 0xc9, 0xf8, 0xf3, 0xee, 0xe5,
    0x3c, 0x37, 0x2a, 0x21, 0x10, 0x1b, 0x06, 0x0d, 0x64, 0x6f, 0x72, 0x79, 0x48, 0x43, 0x5e, 0x55,
    0x01, 0x0a, 0x17, 0x1c, 0x2d, 0x26, 0x3b, 0x30, 0x59, 0x52, 0x4f, 0x44, 0x75, 0x7e, 0x63, 0x68,
    0xb1, 0xba, 0xa7, 0xac, 0x9d, 0x96, 0x8b, 0x80, 0xe9, 0xe2, 0xff, 0xf4, 0xc5, 0xce, 0xd3, 0xd8,
    0x7a, 0x71, 0x6c, 0x67, 0x56, 0x5d, 0x40, 0x4b, 0x22, 0x29, 0x34, 0x3f, 0x0e, 0x05, 0x18, 0x13,
    0xca, 0xc1, 0xdc, 0xd7, 0xe6, 0xed, 0xf0, 0xfb, 0x92, 0x99, 0x84, 0x8f, 0xbe, 0xb5, 0xa8, 0xa3
];
// Multiply by 11
const fn g11(c: u8) -> u8 {
    G11_TABLE[c as usize]
}

#[rustfmt::skip]
const G13_TABLE: [u8; 256] = [
    0x00, 0x0d, 0x1a, 0x17, 0x34, 0x39, 0x2e, 0x23, 0x68, 0x65, 0x72, 0x7f, 0x5c, 0x51, 0x46, 0x4b,
    0xd0, 0xdd, 0xca, 0xc7, 0xe4, 0xe9, 0xfe, 0xf3, 0xb8, 0xb5, 0xa2, 0xaf, 0x8c, 0x81, 0x96, 0x9b,
    0xbb, 0xb6, 0xa1, 0xac, 0x8f, 0x82, 0x95, 0x98, 0xd3, 0xde, 0xc9, 0xc4, 0xe7, 0xea, 0xfd, 0xf0,
    0x6b, 0x66, 0x71, 0x7c, 0x5f, 0x52, 0x45, 0x48, 0x03, 0x0e, 0x19, 0x14, 0x37, 0x3a, 0x2d, 0x20,
    0x6d, 0x60, 0x77, 0x7a, 0x59, 0x54, 0x43, 0x4e, 0x05, 0x08, 0x1f, 0x12, 0x31, 0x3c, 0x2b, 0x26,
    0xbd, 0xb0, 0xa7, 0xaa, 0x89, 0x84, 0x93, 0x9e, 0xd5, 0xd8, 0xcf, 0xc2, 0xe1, 0xec, 0xfb, 0xf6,
    0xd6, 0xdb, 0xcc, 0xc1, 0xe2, 0xef, 0xf8, 0xf5, 0xbe, 0xb3, 0xa4, 0xa9, 0x8a, 0x87, 0x90, 0x9d,
    0x06, 0x0b, 0x1c, 0x11, 0x32, 0x3f, 0x28, 0x25, 0x6e, 0x63, 0x74, 0x79, 0x5a, 0x57, 0x40, 0x4d,
    0xda, 0xd7, 0xc0, 0xcd, 0xee, 0xe3, 0xf4, 0xf9, 0xb2, 0xbf, 0xa8, 0xa5, 0x86, 0x8b, 0x9c, 0x91,
    0x0a, 0x07, 0x10, 0x1d, 0x3e, 0x33, 0x24, 0x29, 0x62, 0x6f, 0x78, 0x75, 0x56, 0x5b, 0x4c, 0x41,
    0x61, 0x6c, 0x7b, 0x76, 0x55, 0x58, 0x4f, 0x42, 0x09, 0x04, 0x13, 0x1e, 0x3d, 0x30, 0x27, 0x2a,
    0xb1, 0xbc, 0xab, 0xa6, 0x85, 0x88, 0x9f, 0x92, 0xd9, 0xd4, 0xc3, 0xce, 0xed, 0xe0, 0xf7, 0xfa,
    0xb7, 0xba, 0xad, 0xa0, 0x83, 0x8e, 0x99, 0x94, 0xdf, 0xd2, 0xc5, 0xc8, 0xeb, 0xe6, 0xf1, 0xfc,
    0x67, 0x6a, 0x7d, 0x70, 0x53, 0x5e, 0x49, 0x44, 0x0f, 0x02, 0x15, 0x18, 0x3b, 0x36, 0x21, 0x2c,
    0x0c, 0x01, 0x16, 0x1b, 0x38, 0x35, 0x22, 0x2f, 0x64, 0x69, 0x7e, 0x73, 0x50, 0x5d, 0x4a, 0x47,
    0xdc, 0xd1, 0xc6, 0xcb, 0xe8, 0xe5, 0xf2, 0xff, 0xb4, 0xb9, 0xae, 0xa3, 0x80, 0x8d, 0x9a, 0x97
];
// Multiply by 13
const fn g13(c: u8) -> u8 {
    G13_TABLE[c as usize]
}

#[rustfmt::skip]
const G14_TABLE: [u8; 256] = [
    0x00, 0x0e, 0x1c, 0x12, 0x38, 0x36, 0x24, 0x2a, 0x70, 0x7e, 0x6c, 0x62, 0x48, 0x46, 0x54, 0x5a,
    0xe0, 0xee, 0xfc, 0xf2, 0xd8, 0xd6, 0xc4, 0xca, 0x90, 0x9e, 0x8c, 0x82, 0xa8, 0xa6, 0xb4, 0xba,
    0xdb, 0xd5, 0xc7, 0xc9, 0xe3, 0xed, 0xff, 0xf1, 0xab, 0xa5, 0xb7, 0xb9, 0x93, 0x9d, 0x8f, 0x81,
    0x3b, 0x35, 0x27, 0x29, 0x03, 0x0d, 0x1f, 0x11, 0x4b, 0x45, 0x57, 0x59, 0x73, 0x7d, 0x6f, 0x61,
    0xad, 0xa3, 0xb1, 0xbf, 0x95, 0x9b, 0x89, 0x87, 0xdd, 0xd3, 0xc1, 0xcf, 0xe5, 0xeb, 0xf9, 0xf7,
    0x4d, 0x43, 0x51, 0x5f, 0x75, 0x7b, 0x69, 0x67, 0x3d, 0x33, 0x21, 0x2f, 0x05, 0x0b, 0x19, 0x17,
    0x76, 0x78, 0x6a, 0x64, 0x4e, 0x40, 0x52, 0x5c, 0x06, 0x08, 0x1a, 0x14, 0x3e, 0x30, 0x22, 0x2c,
    0x96, 0x98, 0x8a, 0x84, 0xae, 0xa0, 0xb2, 0xbc, 0xe6, 0xe8, 0xfa, 0xf4, 0xde, 0xd0, 0xc2, 0xcc,
    0x41, 0x4f, 0x5d, 0x53, 0x79, 0x77, 0x65, 0x6b, 0x31, 0x3f, 0x2d, 0x23, 0x09, 0x07, 0x15, 0x1b,
    0xa1, 0xaf, 0xbd, 0xb3, 0x99, 0x97, 0x85, 0x8b, 0xd1, 0xdf, 0xcd, 0xc3, 0xe9, 0xe7, 0xf5, 0xfb,
    0x9a, 0x94, 0x86, 0x88, 0xa2, 0xac, 0xbe, 0xb0, 0xea, 0xe4, 0xf6, 0xf8, 0xd2, 0xdc, 0xce, 0xc0,
    0x7a, 0x74, 0x66, 0x68, 0x42, 0x4c, 0x5e, 0x50, 0x0a, 0x04, 0x16, 0x18, 0x32, 0x3c, 0x2e, 0x20,
    0xec, 0xe2, 0xf0, 0xfe, 0xd4, 0xda, 0xc8, 0xc6, 0x9c, 0x92, 0x80, 0x8e, 0xa4, 0xaa, 0xb8, 0xb6,
    0x0c, 0x02, 0x10, 0x1e, 0x34, 0x3a, 0x28, 0x26, 0x7c, 0x72, 0x60, 0x6e, 0x44, 0x4a, 0x58, 0x56,
    0x37, 0x39, 0x2b, 0x25, 0x0f, 0x01, 0x13, 0x1d, 0x47, 0x49, 0x5b, 0x55, 0x7f, 0x71, 0x63, 0x6d,
    0xd7, 0xd9, 0xcb, 0xc5, 0xef, 0xe1, 0xf3, 0xfd, 0xa7, 0xa9, 0xbb, 0xb5, 0x9f, 0x91, 0x83, 0x8d
];
// Multiply by 14
const fn g14(c: u8) -> u8 {
    G14_TABLE[c as usize]
}

#[rustfmt::skip]
const fn mix_column(a: &[u8; 4]) -> [u8; 4] {
    [
        g2(a[0]) ^ g3(a[1])  ^    a[2]  ^    a[3] ,
           a[0]  ^ g2(a[1])  ^ g3(a[2]) ^    a[3] ,
           a[0]  ^    a[1]   ^ g2(a[2]) ^ g3(a[3]),
        g3(a[0]) ^    a[1]   ^    a[2]  ^ g2(a[3]),
    ]
}

#[rustfmt::skip]
const fn inv_mix_column(b: &[u8; 4]) -> [u8; 4] {
    [
        g14(b[0]) ^ g11(b[1]) ^ g13(b[2]) ^ g9(b[3]),
        g9(b[0])  ^ g14(b[1]) ^ g11(b[2]) ^ g13(b[3]),
        g13(b[0]) ^ g9(b[1])  ^ g14(b[2]) ^ g11(b[3]),
        g11(b[0]) ^ g13(b[1]) ^ g9(b[2])  ^ g14(b[3]),
    ]
}

fn mix_columns(state: &mut [[u8; 4]; 4], mode: CryptMode) {
    for i in 0..4 {
        let col = &[state[0][i], state[1][i], state[2][i], state[3][i]];
        let col = match mode == CryptMode::Encrypt {
            true => mix_column(col),
            false => inv_mix_column(col),
        };

        state[0][i] = col[0];
        state[1][i] = col[1];
        state[2][i] = col[2];
        state[3][i] = col[3];
    }
}

const fn keycore(c: &[u8; 4], i: usize) -> [u8; 4] {
    // rotate_left: [0,1,2,3] => [1,2,3,0]
    // followed by sbox with rconi on first element
    [sbox(c[1]) ^ rcon(i), sbox(c[2]), sbox(c[3]), sbox(c[0])]
}

#[allow(clippy::manual_memcpy)]
fn key_expansion(bits: usize, ekey: &mut [u8], passkey: &[u8]) {
    let (esize, n) = match bits {
        128 => (176, 16),
        192 => (208, 24),
        256 => (240, 32),
        _ => panic!("{bits} not in [128, 192, 256]"),
    };

    let mut bytes = n;
    let mut rconi = 1;

    // initialize expanded key to encryption key
    ekey[..bytes].copy_from_slice(&passkey[..bytes]);

    // until there are "esize" bytes of expanded key
    while bytes < esize {
        // previous 4 bytes of expanded key
        // key schedule core with rcon(i)
        let mut t: [u8; 4] = keycore(
            &[ekey[bytes - 4], ekey[bytes - 3], ekey[bytes - 2], ekey[bytes - 1]],
            rconi,
        );
        rconi += 1;

        // 4 times for the next 16 bytes of expanded key
        for _ in 0..4 {
            for i in 0..4 {
                t[i] ^= ekey[bytes - n + i];
                ekey[bytes + i] = t[i];
            }
            bytes += 4;
        }

        // 128 bit processing is complete
        // 192 requires 8 more bytes
        // 256 requires 16 more bytes + another sbox()
        if bits == 192 && bytes < esize {
            for _ in 0..2 {
                for i in 0..4 {
                    t[i] ^= ekey[bytes - n + i];
                    ekey[bytes + i] = t[i];
                }
                bytes += 4;
            }
        } else if bits == 256 && bytes < esize {
            for i in 0..4 {
                t[i] = sbox(t[i]) ^ ekey[bytes - n + i];
                ekey[bytes + i] = t[i];
            }
            bytes += 4;

            for _ in 0..3 {
                for i in 0..4 {
                    t[i] ^= ekey[bytes - n + i];
                    ekey[bytes + i] = t[i];
                }
                bytes += 4;
            }
        }
    }
}

fn add_round_key(state: &mut [[u8; 4]; 4], ekey: &[u8], round: usize, cycles: usize, mode: CryptMode) {
    let mut offset = match mode {
        CryptMode::Encrypt => 16 * round,
        _ => 16 * (cycles - round),
    };

    for i in 0..4 {
        for item in state.iter_mut() {
            item[i] ^= ekey[offset]; // index state as column major
            offset += 1;
        }
    }

    /*
    for i in 0..4 {
        for j in 0..4 {
            state[j][i] ^= ekey[offset]; // index state as column major
            offset += 1;
        }
    }
    */
}

fn sub_bytes(state: &mut [[u8; 4]; 4], mode: CryptMode) {
    let sbox_fn = match mode {
        CryptMode::Encrypt => sbox,
        _ => inv_sbox,
    };

    for row in state.iter_mut() {
        for elem in row.iter_mut() {
            *elem = sbox_fn(*elem);
        }
    }

    /*
    for i in 0..4 {
        for j in 0..4 {
            state[i][j] = sbox_fn(state[i][j]);
        }
    }
    */
}

fn shift_rows(state: &mut [[u8; 4]; 4], mode: CryptMode) {
    // rotate_left:   [0,1,2,3] => [1,2,3,0]
    // rotate_right:  [0,1,2,3] => [3,0,1,2]
    if mode == CryptMode::Encrypt {
        state[1] = [state[1][1], state[1][2], state[1][3], state[1][0]]; // RL
        state[2] = [state[2][2], state[2][3], state[2][0], state[2][1]]; // RL(2)
        state[3] = [state[3][3], state[3][0], state[3][1], state[3][2]]; // RR
    } else {
        state[1] = [state[1][3], state[1][0], state[1][1], state[1][2]]; // RR
        state[2] = [state[2][2], state[2][3], state[2][0], state[2][1]]; // RR(2)
        state[3] = [state[3][1], state[3][2], state[3][3], state[3][0]]; // RL
    }
}

fn aes_ctr(bits: usize, passkey: &[u8], data: &[u8], iv: &[u8; 16]) -> Vec<u8> {
    let nbytes = data.len();
    let mut output = vec![0; nbytes];
    let mut n = 0;
    let mut ctr_block: [u8; 16] = [0; 16];
    let mut counter: u64 = u64::from_be_bytes(iv[8..].try_into().expect("from_be_bytes"));

    ctr_block[..8].copy_from_slice(&iv[..8]);

    while n < nbytes {
        ctr_block[8..].copy_from_slice(&counter.to_be_bytes());
        let blocks = aes_cipher_encrypt(bits, passkey, &ctr_block, &Cipher::ECB, iv);
        let mut i = 0;
        while n < nbytes && i < 16 {
            output[n] = data[n] ^ blocks[i];
            i += 1;
            n += 1;
        }
        counter += 1;
    }
    output
}

/*
 *     Round  Operation for bits == 128
 *     -      add_round_key(state)
 *     0      add_round_key(mix_columns(shift_rows(sub_bytes(state))))
 *     1      add_round_key(mix_columns(shift_rows(sub_bytes(state))))
 *     2      add_round_key(mix_columns(shift_rows(sub_bytes(state))))
 *     3      add_round_key(mix_columns(shift_rows(sub_bytes(state))))
 *     4      add_round_key(mix_columns(shift_rows(sub_bytes(state))))
 *     5      add_round_key(mix_columns(shift_rows(sub_bytes(state))))
 *     6      add_round_key(mix_columns(shift_rows(sub_bytes(state))))
 *     7      add_round_key(mix_columns(shift_rows(sub_bytes(state))))
 *     8      add_round_key(mix_columns(shift_rows(sub_bytes(state))))
 *     9      add_round_key(shift_rows(sub_bytes(state)))
 */
fn aes_cipher_encrypt(bits: usize, passkey: &[u8], data: &[u8], cipher: &Cipher, iv: &[u8; 16]) -> Vec<u8> {
    let nbytes = data.len();
    let mut output = vec![];
    let mut state: [[u8; 4]; 4] = [[0; 4]; 4];

    let (esize, cycles) = match bits {
        128 => (176, 10),
        192 => (208, 12),
        256 => (240, 14),
        _ => panic!("{bits} not in [128, 192, 256]"),
    };
    let mut ekey = vec![0; esize]; // expanded key size: [176, 208, 240]

    let mut pad = match nbytes % 16 != 0 {
        true => 0,
        false => 16,
    };

    let mut cipher_text: [u8; 16] = match cipher == &Cipher::CBC {
        true => *iv,
        false => [0; 16],
    };

    /*
     * dwf -- padding implementation notes: Wed Mar  1 22:19:23 MST 2017
     *
     * Computing PKCS#7 padding
     *   High Level:
     *      If all the data bytes have been consumed when loading the state then
     *      determine the pad value needed to fill the remainder of state based on
     *      how much more data is needed to fill the block.
     *
     *      Set pad value once to the computed value:
     *
     *          if (!pad) pad = 16 - n % 16; // PKCS#7 padding
     *
     *   Exception:
     *      The above doesn't work when nbytes is an even block size and a full block of
     *      padded (16) is needed.  An additional full loop iteration is needed with
     *      no data bytes to consume.
     *
     *      To handle this we initialize pad to 0 or 16 and modify the loop condition to:
     *
     *          ( n < nbytes + pad/16 )
     *
     *      only when ( nbytes % 16 == 0 ) will one iteration be added:
     *
     *          + ( pad / 16 )  // evaluates to 0 or 1
     *
     *      The pad value has already been set (to 16) so it wont be re-computed, resulting
     *      in an extra full block fill of 16 (hex: 10)
     */

    key_expansion(bits, &mut ekey, passkey);

    let mut n = 0;
    while n < nbytes + pad / 16 {
        for i in 0..4 {
            for j in 0..4 {
                if n < nbytes {
                    state[j][i] = data[n];
                } else {
                    // PKCS#7 padding
                    if pad == 0 {
                        pad = 16 - n % 16;
                    }
                    state[j][i] = pad as u8;
                }

                if cipher == &Cipher::CBC {
                    state[j][i] ^= cipher_text[j + 4 * i];
                }
                n += 1;
            }
        }

        add_round_key(&mut state, &ekey, 0, cycles, CryptMode::Encrypt);

        for i in 1..=cycles {
            sub_bytes(&mut state, CryptMode::Encrypt);
            shift_rows(&mut state, CryptMode::Encrypt);
            if i < cycles {
                mix_columns(&mut state, CryptMode::Encrypt);
            }
            add_round_key(&mut state, &ekey, i, cycles, CryptMode::Encrypt);
        }

        for i in 0..4 {
            for j in 0..4 {
                cipher_text[j + 4 * i] = state[j][i];
                output.push(state[j][i]);
            }
        }
    }
    output
}

/*
 * Reverse order of encrypt in addition to the inverse of each function
 *
 *     Round  Operation for bits == 128
 *     -      add_round_key(state)
 *     0      mix_columns(add_round_key(sub_bytes(shift_rows(state))))
 *     1      mix_columns(add_round_key(sub_bytes(shift_rows(state))))
 *     2      mix_columns(add_round_key(sub_bytes(shift_rows(state))))
 *     3      mix_columns(add_round_key(sub_bytes(shift_rows(state))))
 *     4      mix_columns(add_round_key(sub_bytes(shift_rows(state))))
 *     5      mix_columns(add_round_key(sub_bytes(shift_rows(state))))
 *     6      mix_columns(add_round_key(sub_bytes(shift_rows(state))))
 *     7      mix_columns(add_round_key(sub_bytes(shift_rows(state))))
 *     8      mix_columns(add_round_key(sub_bytes(shift_rows(state))))
 *     9      add_round_key(sub_bytes(shift_rows(state)))
 */

#[allow(clippy::needless_range_loop)]
fn aes_cipher_decrypt(bits: usize, passkey: &[u8], data: &[u8], cipher: &Cipher, iv: &[u8; 16]) -> Vec<u8> {
    let nbytes = data.len();
    let mut output = vec![];
    let mut state: [[u8; 4]; 4] = [[0; 4]; 4];

    let mut cipher_text: [u8; 16] = match cipher == &Cipher::CBC {
        true => *iv,
        false => [0; 16],
    };

    let (esize, cycles) = match bits {
        128 => (176, 10),
        192 => (208, 12),
        256 => (240, 14),
        _ => panic!("{bits} not in [128, 192, 256]"),
    };
    let mut ekey = vec![0; esize]; // expanded key size: [176, 208, 240]

    key_expansion(bits, &mut ekey, passkey);

    for n in (0..nbytes).step_by(16) {
        for i in 0..4 {
            for j in 0..4 {
                state[j][i] = data[n + j + 4 * i];
            }
        }

        add_round_key(&mut state, &ekey, 0, cycles, CryptMode::Decrypt);

        for i in 1..=cycles {
            shift_rows(&mut state, CryptMode::Decrypt);
            sub_bytes(&mut state, CryptMode::Decrypt);
            add_round_key(&mut state, &ekey, i, cycles, CryptMode::Decrypt);
            if i < cycles {
                mix_columns(&mut state, CryptMode::Decrypt);
            }
        }

        for i in 0..4 {
            for j in 0..4 {
                if cipher == &Cipher::CBC {
                    let offset = j + 4 * i;
                    state[j][i] ^= cipher_text[offset];
                    cipher_text[offset] = data[n + offset];
                }
                output.push(state[j][i]);
            }
        }
    }
    output
}
